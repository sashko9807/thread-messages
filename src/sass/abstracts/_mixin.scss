@use "./_variables" as *;

@mixin flexCentered($dir) {
  display: flex;
  justify-content: center;
  flex-direction: $dir;
  align-items: center;
}

@mixin width-minmax($min, $max) {
  min-width: $min;
  max-width: $max;
}

@mixin py($p) {
  padding-top: $p;
  padding-bottom: $p;
}

@mixin px($p) {
  padding-left: $p;
  padding-right: $p;
}

@mixin my($m) {
  margin-top: $m;
  margin-bottom: $m;
}

@mixin mx($m) {
  margin-left: $m;
  margin-right: $m;
}

@mixin borderRadius($b) {
  border-radius: $b;
}

@mixin collapsedView($offsetX: 50px, $offsetY: 10px) {
  @for $card from 1 through $totalCollapsedCards {
    li:nth-child(#{$card + 1}) {
      z-index: -$card * 1;
      transform: translate3d($card * $offsetX, -$card * $offsetY, 50px);
      padding-right: 0;
    }
  }
  &:nth-last-of-type(n + #{$totalCollapsedCards + 1}) {
    display: none;
  }
}

@mixin breakpoint($breakpoint, $direction: min) {
  //check if the supplied breakpoint exists in our breakpoits map
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-values: map-get($breakpoints, $breakpoint);
    $breakpoint-min: map-get($breakpoint-values, min);
    $breakpoint-max: map-get($breakpoint-values, max);

    //check if we are writing styles for larger or smaller screens
    @if $direction == min {
      @media (min-width: $breakpoint-min) {
        @content;
      }
    } @else {
      @media (max-width: $breakpoint-max) {
        @content;
      }
    }

    // use the custom value if the breakpoint is not part of the pre-defined list
  } @else {
    @if $direction == min {
      @media (min-width: $breakpoint) {
        @content;
      }
    } @else {
      @media (max-width: $breakpoint) {
        @content;
      }
    }
  }
}
